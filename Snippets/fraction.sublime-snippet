<snippet>
	<content><![CDATA[
    
lli gcd (lli a, lli b) { return (b==0) ? a : gcd(b,a%b); }

struct frac{
    lli num, den;
    inline void simplify()
    {
        if(den<0) { num*=-1; den*=-1; }
        lli temp = gcd(abs(num),den);
        if(temp) { num/=temp; den/=temp; }
    }
    frac() {  num=0;  den=1;  }
    frac(lli n, lli d, bool fl=1) : num(n), den(d) { if(fl) simplify(); }
    inline bool operator < (const frac &rhs) const {
        return num * rhs.den < den * rhs.num;
    }
    inline bool operator > (const frac &rhs) const {
        return num * rhs.den > den * rhs.num;
    }
    inline bool operator <= (const frac &rhs) const {
        return num * rhs.den <= den * rhs.num;
    }
    inline bool operator >= (const frac &rhs) const {
        return num * rhs.den >= den * rhs.num;
    }
    inline bool operator == (const frac &rhs) const {
        return num * rhs.den == den * rhs.num;
    }
    inline bool operator != (const frac &rhs) const {
        return num * rhs.den != den * rhs.num;
    }
    inline frac operator + (const frac &rhs) const {
        lli temp = gcd(den, rhs.den);
        return frac(num * (rhs.den/temp) + rhs.num * (den/temp), den * (rhs.den/temp));
    }
    inline frac operator - (const frac &rhs) const {
        lli temp = gcd(den, rhs.den);
        return frac(num * (rhs.den/temp) - rhs.num * (den/temp), den * (rhs.den/temp));
    }
    inline frac operator * (const frac &rhs) const {
        return frac(num * rhs.num, den * rhs.den);
    }
    inline frac operator / (const frac &rhs) const {
        return frac(num * rhs.den, den * rhs.num);
    }
    inline frac operator - () const { return frac(-num,den,0); }
    inline frac operator + () const { return *this; }
    inline void operator -= (const frac &rhs) { *this = *this - rhs ; }
    inline void operator += (const frac &rhs) { *this = *this + rhs ; }
    inline void operator /= (const frac &rhs) { *this = *this / rhs ; }
    inline void operator *= (const frac &rhs) { *this = *this * rhs ; }
};

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>fraction</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>