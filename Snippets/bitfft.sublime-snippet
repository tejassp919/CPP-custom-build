<snippet>
	<content><![CDATA[

// for xor [1 1, 1 -1]
// for and [0 1, 1 1] and it's inverse is [-1 1, 1 0]
// for or  [1 0, 1 1] and it's inverse is [1 0, -1 1]
void FWHT(std::vector<lli> &P, bool inverse)
{
    lli u, v;
    for (int len = 1; len < sz(P); len <<= 1) {
        for (int i = 0; i < sz(P); i += 2 * len) {
            for (int j = 0; j < len; j++) {
                u = P[i + j];
                v = P[i + len + j];
                P[i + j] = u + v;
                P[i + len + j] = u - v;
            }
        }
    }
    if (inverse) {
        for (int i = 0; i < sz(P); i++)
            P[i] = P[i] / sz(P);
    }
}

std::vector<lli> bitmultiply (std::vector<lli> a, std::vector<lli> b)
{
    int n=1;
    while(n<sz(a)||n<sz(b)) n*=2;
    a.resize(n);   b.resize(n);
    FWHT(a,0); FWHT(b,0);
    fol(i,0,n) a[i]=a[i]*b[i];
    FWHT(a,1);
    return a;
}

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>bitfft</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
